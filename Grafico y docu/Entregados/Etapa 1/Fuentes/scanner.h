//
// Created by eadan on 3/24/2019.
//
#include <string>
#include <list>
#include <algorithm>
#include <map>
#include <fstream>
#include <iostream>
#include <queue>
#include "token.h"
#include "estados.h"

#ifndef SCANNER_SCANNER_H
#define SCANNER_SCANNER_H
#define BUFFSIZE 256
struct scanner{

    std::queue<Token> resqueue;                         //Cola que tiene todos los tokens (este es el que se toquetea)
    char buffer[2][BUFFSIZE+1];//,buffer2[BUFFSIZE+1];
    char *base,*foward;
    FILE * file;
    char*filename;                                      //Este debe ser puesto
    State initialState = q0;
    State currentState;

    /*std::map<State,int> retros={
            {q1,1},
            {q5,1}//,
            //{s_error_not_in_automata,1}
    };*/                         //Estado asociado a la cantidad de asteriscos que tiene (0 si no)

    std::map<std::pair<State,char>, State> nextState={
            {std::make_pair(q0,' '),q0},
            {std::make_pair(q0,'\t'),q0},
            {std::make_pair(q0,'\n'),q0},
            {std::make_pair(q0,'a'),qa},
            {std::make_pair(qa,'e'),qae},
            {std::make_pair(qae,'g'),qaeg},
            {std::make_pair(qaeg,'e'),qaege},
            {std::make_pair(qaege,'r'),qaeger},
            {std::make_pair(qa,'u'),qau},
            {std::make_pair(qau,'c'),qauc},
            {std::make_pair(qauc,'t'),qauct},
            {std::make_pair(qauct,'u'),qauctu},
            {std::make_pair(qauctu,'m'),qauctum},
            {std::make_pair(qau,'t'),qaut},
            {std::make_pair(qaut,'='),qaut_equals},
            {std::make_pair(qaut,'e'),qaute},
            {std::make_pair(qaute,'m'),qautem},
            {std::make_pair(q0,'c'),qc},
            {std::make_pair(qc,'a'),qca},
            {std::make_pair(qca,'s'),qcas},
            {std::make_pair(qcas,'u'),qcasu},
            {std::make_pair(qcasu,'s'),qcasus},
            {std::make_pair(qca,'t'),qcat},
            {std::make_pair(qcat,'e'),qcate},
            {std::make_pair(qcate,'n'),qcaten},
            {std::make_pair(qcaten,'a'),qcatena},
            {std::make_pair(qc,'e'),qce},
            {std::make_pair(qce,'r'),qcer},
            {std::make_pair(qcer,'t'),qcert},
            {std::make_pair(qcert,'u'),qcertu},
            {std::make_pair(qcertu,'s'),qcertus},
            {std::make_pair(qc,'l'),qcl},
            {std::make_pair(qcl,'a'),qcla},
            {std::make_pair(qcla,'u'),qclau},
            {std::make_pair(qclau,'d'),qclaud},
            {std::make_pair(qclaud,'e'),qclaude},
            {std::make_pair(qclaude,'o'),qclaudeo},
            {std::make_pair(qc,'o'),qco},
            {std::make_pair(qco,'m'),qcom},
            {std::make_pair(qcom,'m'),qcomm},
            {std::make_pair(qcomm,'u'),qcommu},
            {std::make_pair(qcommu,'t'),qcommut},
            {std::make_pair(qcommut,'a'),qcommuta},
            {std::make_pair(qcommuta,'b'),qcommutab},
            {std::make_pair(qcommutab,'i'),qcommutabi},
            {std::make_pair(qcommutabi,'l'),qcommutabil},
            {std::make_pair(qcommutabil,'i'),qcommutabili},
            {std::make_pair(qcommutabili,'s'),qcommutabilis},
            {std::make_pair(qco,'n'),qcon},
            {std::make_pair(qcon,'i'),qconi},
            {std::make_pair(qconi,'g'),qconig},
            {std::make_pair(qconig,'u'),qconigu},
            {std::make_pair(qconigu,'o'),qconiguo},
            {std::make_pair(qco,'r'),qcor},
            {std::make_pair(qcor,'p'),qcorp},
            {std::make_pair(qcorp,'u'),qcorpu},
            {std::make_pair(qcorpu,'s'),qcorpus},
            {std::make_pair(q0,'d'),qd},
            {std::make_pair(qd,'e'),qde},
            {std::make_pair(qde,'c'),qdec},
            {std::make_pair(qdec,'r'),qdecr},
            {std::make_pair(qdecr,'e'),qdecre},
            {std::make_pair(qdecre,'m'),qdecrem},
            {std::make_pair(qdecrem,'e'),qdecreme},
            {std::make_pair(qdecreme,'n'),qdecremen},
            {std::make_pair(qdecremen,'t'),qdecrement},
            {std::make_pair(qdecrement,'u'),qdecrementu},
            {std::make_pair(qdecrementu,'m'),qdecrementum},
            {std::make_pair(qde,'t'),qdet},
            {std::make_pair(qdet,'r'),qdetr},
            {std::make_pair(qdetr,'i'),qdetri},
            {std::make_pair(qdetri,'m'),qdetrim},
            {std::make_pair(qdetrim,'e'),qdetrime},
            {std::make_pair(qdetrime,'n'),qdetrimen},
            {std::make_pair(qdetrimen,'t'),qdetriment},
            {std::make_pair(qdetriment,'u'),qdetrimentu},
            {std::make_pair(qdetrimentu,'m'),qdetrimentum},
            {std::make_pair(qd,'i'),qdi},
            {std::make_pair(qdi,'r'),qdir},
            {std::make_pair(qdir,'e'),qdire},
            {std::make_pair(qdire,'c'),qdirec},
            {std::make_pair(qdirec,'t'),qdirect},
            {std::make_pair(qdirect,'u'),qdirectu},
            {std::make_pair(qdirectu,'s'),qdirectus},
            {std::make_pair(qdi,'t'),qdit},
            {std::make_pair(qdit,'o'),qdito},
            {std::make_pair(qdi,'x'),qdix},
            {std::make_pair(qdix,'i'),qdixi},
            {std::make_pair(qd,'u'),qdu},
            {std::make_pair(qdu,'a'),qdua},
            {std::make_pair(qdua,'l'),qdual},
            {std::make_pair(qdual,'i'),qduali},
            {std::make_pair(qduali,'s'),qdualis},
            {std::make_pair(q0,'e'),qe},
            {std::make_pair(qe,'f'),qef},
            {std::make_pair(qef,'f'),qeff},
            {std::make_pair(qeff,'i'),qeffi},
            {std::make_pair(qeffi,'c'),qeffic},
            {std::make_pair(qeffic,'i'),qeffici},
            {std::make_pair(qeffici,'o'),qefficio},
            {std::make_pair(qe,'s'),qes},
            {std::make_pair(qes,'t'),qest},
            {std::make_pair(qes,'c'),qesc},
            {std::make_pair(qesc,'r'),qescr},
            {std::make_pair(qescr,'i'),qescri},
            {std::make_pair(qescri,'b'),qescrib},
            {std::make_pair(qescrib,'o'),qescribo},
            {std::make_pair(qe,'t'),qet},
            {std::make_pair(qe,'='),qet_equals},
            {std::make_pair(qe,'x'),qex},
            {std::make_pair(qex,'e'),qexe},
            {std::make_pair(qexe,'m'),qexem},
            {std::make_pair(qexem,'p'),qexemp},
            {std::make_pair(qexemp,'l'),qexempl},
            {std::make_pair(qexempl,'a'),qexempla},
            {std::make_pair(qexempla,'r'),qexemplar},
            {std::make_pair(q0,'f'),qf},
            {std::make_pair(qf,'u'),qfu},
            {std::make_pair(qfu,'r'),qfur},
            {std::make_pair(qfur,'i'),qfuri},
            {std::make_pair(qfuri,'b'),qfurib},
            {std::make_pair(qfurib,'u'),qfuribu},
            {std::make_pair(qfuribu,'n'),qfuribun},
            {std::make_pair(qfuribun,'d'),qfuribund},
            {std::make_pair(qfuribund,'u'),qfuribundu},
            {std::make_pair(qfuribundu,'s'),qfuribundus},
            {std::make_pair(qf,'r'),qfr},
            {std::make_pair(qfr,'a'),qfra},
            {std::make_pair(qfra,'c'),qfrac},
            {std::make_pair(qfrac,'t'),qfract},
            {std::make_pair(qfract,'i'),qfracti},
            {std::make_pair(qfracti,'o'),qfractio},
            {std::make_pair(qf,'i'),qfi},
            {std::make_pair(qfi,'r'),qfir},
            {std::make_pair(qfi,'n'),qfin},
            {std::make_pair(qfin,'i'),qfini},
            {std::make_pair(qfini,'s'),qfinis},
            {std::make_pair(qfir,'m'),qfirm},
            {std::make_pair(qfirm,'a'),qfirma},
            {std::make_pair(qfirma,'m'),qfirmam},
            {std::make_pair(qfirmam,'e'),qfirmame},
            {std::make_pair(qfirmame,'n'),qfirmamen},
            {std::make_pair(qfirmamen,'t'),qfirmament},
            {std::make_pair(qfirmament,'u'),qfirmamentu},
            {std::make_pair(qfirmamentu,'m'),qfirmamentum},
            {std::make_pair(qf,'a'),qfa},
            {std::make_pair(qfa,'l'),qfal},
            {std::make_pair(qfal,'s'),qfals},
            {std::make_pair(qfals,'i'),qfalsi},
            {std::make_pair(qfalsi,'d'),qfalsid},
            {std::make_pair(qfalsid,'i'),qfalsidi},
            {std::make_pair(qfalsidi,'c'),qfalsidic},
            {std::make_pair(qfalsidic,'u'),qfalsidicu},
            {std::make_pair(qfalsidicu,'s'),qfalsidicus},
            {std::make_pair(q0,'i'),qi},
            {std::make_pair(qi,'g'),qig},
            {std::make_pair(qig,'n'),qign},
            {std::make_pair(qi,'m'),qim},
            {std::make_pair(qim,'a'),qima},
            {std::make_pair(qima,'g'),qimag},
            {std::make_pair(qimag,'o'),qimago},
            {std::make_pair(qim,'p'),qimp},
            {std::make_pair(qimp,'o'),qimpo},
            {std::make_pair(qimpo,'n'),qimpon},
            {std::make_pair(qimpon,'o'),qimpono},
            {std::make_pair(qi,'n'),qin},
            {std::make_pair(qin,'c'),qinc},
            {std::make_pair(qinc,'r'),qincr},
            {std::make_pair(qincr,'e'),qincre},
            {std::make_pair(qincre,'m'),qincrem},
            {std::make_pair(qincrem,'e'),qincreme},
            {std::make_pair(qincreme,'n'),qincremen},
            {std::make_pair(qincremen,'t'),qincrement},
            {std::make_pair(qincrement,'u'),qincrementu},
            {std::make_pair(qincrementu,'m'),qincrementum},
            {std::make_pair(qin,'i'),qini},
            {std::make_pair(qini,'t'),qinit},
            {std::make_pair(qinit,'u'),qinitu},
            {std::make_pair(qinitu,'m'),qinitum},
            {std::make_pair(qi,'t'),qit},
            {std::make_pair(qit,'e'),qite},
            {std::make_pair(qite,'r'),qiter},
            {std::make_pair(qiter,'o'),qitero},
            {std::make_pair(q0,'l'),ql},
            {std::make_pair(ql,'e'),qle},
            {std::make_pair(qle,'c'),qlec},
            {std::make_pair(qlec,'t'),qlect},
            {std::make_pair(qlect,'i'),qlecti},
            {std::make_pair(qlecti,'o'),qlectio},
            {std::make_pair(ql,'i'),qli},
            {std::make_pair(qli,'b'),qlib},
            {std::make_pair(qlib,'e'),qlibe},
            {std::make_pair(qlibe,'r'),qliber},
            {std::make_pair(qli,'g'),qlig},
            {std::make_pair(qlig,'o'),qligo},
            {std::make_pair(q0,'g'),qg},
            {std::make_pair(qg,'r'),qgr},
            {std::make_pair(qgr,'a'),qgra},
            {std::make_pair(qgra,'d'),qgrad},
            {std::make_pair(qgrad,'u'),qgradu},
            {std::make_pair(qgradu,'s'),qgradus},
            {std::make_pair(q0,'m'),qm},
            {std::make_pair(qm,'e'),qme},
            {std::make_pair(qme,'n'),qmen},
            {std::make_pair(qmen,'t'),qment},
            {std::make_pair(qment,'i'),qmenti},
            {std::make_pair(qmenti,'r'),qmentir},
            {std::make_pair(qmentir,'i'),qmentiri},
            {std::make_pair(q0,'o'),qo},
            {std::make_pair(qo,'p'),qop},
            {std::make_pair(qop,'u'),qopu},
            {std::make_pair(qopu,'s'),qopus},
            {std::make_pair(qo,'r'),qor},
            {std::make_pair(qor,'d'),qord},
            {std::make_pair(qord,'o'),qordo},
            {std::make_pair(q0,'n'),qn},
            {std::make_pair(qn,'e'),qne},
            {std::make_pair(qne,'c'),qnec},
            {std::make_pair(qnec,'o'),qneco},
            {std::make_pair(qn,'o'),qno},
            {std::make_pair(qno,'m'),qnom},
            {std::make_pair(qnom,'e'),qnome},
            {std::make_pair(qnome,'n'),qnomen},
            {std::make_pair(qno,'n'),qnon},
            {std::make_pair(qn,'u'),qnu},
            {std::make_pair(qnu,'m'),qnum},
            {std::make_pair(qnum,'e'),qnume},
            {std::make_pair(qnume,'r'),qnumer},
            {std::make_pair(qnumer,'u'),qnumeru},
            {std::make_pair(qnumeru,'s'),qnumerus},
            {std::make_pair(q0,'p'),qp},
            {std::make_pair(qp,'a'),qpa},
            {std::make_pair(qpa,'n'),qpan},
            {std::make_pair(qpan,'i'),qpani},
            {std::make_pair(qpani,'s'),qpanis},
            {std::make_pair(qpa,'t'),qpat},
            {std::make_pair(qpat,'e'),qpate},
            {std::make_pair(qpate,'n'),qpaten},
            {std::make_pair(qpaten,'t'),qpatent},
            {std::make_pair(qpatent,'i'),qpatenti},
            {std::make_pair(qpatenti,'b'),qpatentib},
            {std::make_pair(qpatentib,'u'),qpatentibu},
            {std::make_pair(qpatentibu,'s'),qpatentibus},
            {std::make_pair(qp,'e'),qpe},
            {std::make_pair(qpe,'r'),qper},
            {std::make_pair(qper,'p'),qperp},
            {std::make_pair(qperp,'e'),qperpe},
            {std::make_pair(qperpe,'t'),qperpet},
            {std::make_pair(qperpet,'u'),qperpetu},
            {std::make_pair(qperpetu,'s'),qperpetus},
            {std::make_pair(qper,'g'),qperg},
            {std::make_pair(qperg,'o'),qpergo},
            {std::make_pair(qp,'r'),qpr},
            {std::make_pair(qpr,'o'),qpro},
            {std::make_pair(qpro,'p'),qprop},
            {std::make_pair(qprop,'e'),qprope},
            {std::make_pair(q0,'q'),qq},
            {std::make_pair(qq,'u'),qqu},
            {std::make_pair(qqu,'a'),qqua},
            {std::make_pair(qqua,'n'),qquan},
            {std::make_pair(qquan,'t'),qquant},
            {std::make_pair(qquant,'u'),qquantu},
            {std::make_pair(qquantu,'s'),qquantus},
            {std::make_pair(q0,'r'),qr},
            {std::make_pair(qr,'e'),qre},
            {std::make_pair(qre,'d'),qred},
            {std::make_pair(qred,'i'),qredi},
            {std::make_pair(qredi,'t'),qredit},
            {std::make_pair(qredit,'u'),qreditu},
            {std::make_pair(qreditu,'s'),qreditus},
            {std::make_pair(qre,'s'),qres},
            {std::make_pair(qres,'c'),qresc},
            {std::make_pair(qresc,'r'),qrescr},
            {std::make_pair(qrescr,'i'),qrescri},
            {std::make_pair(qrescri,'b'),qrescrib},
            {std::make_pair(qrescrib,'o'),qrescribo},
            {std::make_pair(q0,'s'),qs},
            {std::make_pair(qs,'c'),qsc},
            {std::make_pair(qsc,'r'),qscr},
            {std::make_pair(qscr,'i'),qscri},
            {std::make_pair(qscri,'p'),qscrip},
            {std::make_pair(qscrip,'t'),qscript},
            {std::make_pair(qscript,'u'),qscriptu},
            {std::make_pair(qscriptu,'r'),qscriptur},
            {std::make_pair(qscriptur,'a'),qscriptura},
            {std::make_pair(qscriptura,'m'),qscripturam},
            {std::make_pair(qs,'i'),qsi},
            {std::make_pair(qsi,'g'),qsig},
            {std::make_pair(qsig,'l'),qsigl},
            {std::make_pair(qsigl,'a'),qsigla},
            {std::make_pair(qs,'u'),qsu},
            {std::make_pair(qsu,'m'),qsum},
            {std::make_pair(q0,'t'),qt},
            {std::make_pair(qt,'e'),qte},
            {std::make_pair(qte,'m'),qtem},
            {std::make_pair(qtem,'p'),qtemp},
            {std::make_pair(qtemp,'u'),qtempu},
            {std::make_pair(qtempu,'s'),qtempus},
            {std::make_pair(q0,'u'),qu},
            {std::make_pair(qu,'s'),qus},
            {std::make_pair(qus,'q'),qusq},
            {std::make_pair(qusq,'u'),qusqu},
            {std::make_pair(qusqu,'e'),qusque},
            {std::make_pair(q0,'v'),qv},
            {std::make_pair(qv,'e'),qve},
            {std::make_pair(qve,'r'),qver},
            {std::make_pair(qver,'i'),qveri},
            {std::make_pair(qveri,'d'),qverid},
            {std::make_pair(qverid,'i'),qveridi},
            {std::make_pair(qveridi,'c'),qveridic},
            {std::make_pair(qveridic,'u'),qveridicu},
            {std::make_pair(qveridicu,'s'),qveridicus},
            {std::make_pair(q0,'x'),qx},
            {std::make_pair(qx,'a'),qxa},
            {std::make_pair(qxa,'u'),qxau},
            {std::make_pair(qxau,'t'),qxaut},
            {std::make_pair(qxaut,'='),qxaut_equals},
            {std::make_pair(q0,'['),qLSB},
            {std::make_pair(qLSB,'>'),qLSB_GT},
            {std::make_pair(qLSB_GT,'>'),qLSB_GT_GT},
            {std::make_pair(qLSB_GT_GT,']'),qLSB_GT_GT_RSB},
            {std::make_pair(qLSB,'<'),qLSB_LT},
            {std::make_pair(qLSB_LT,'<'),qLSB_LT_LT},
            {std::make_pair(qLSB_LT_LT,']'),qLSB_LT_LT_RSB},
            {std::make_pair(qLSB,'&'),qLSB_and},
            {std::make_pair(qLSB_and,'?'),qLSB_and_question},
            {std::make_pair(qLSB_and_question,']'),qLSB_and_question_RSB},
            {std::make_pair(qLSB,'#'),qLSB_hash},
            {std::make_pair(qLSB_hash,'?'),qLSB_hash_question},
            {std::make_pair(qLSB_hash_question,']'),qLSB_hash_question_RSB},
            {std::make_pair(q0,']'),qRSB},
            {std::make_pair(q0,','),qComma},
            {std::make_pair(q0,'&'),qAnd},
            {std::make_pair(qAnd,'#'),qAnd_hash},
            {std::make_pair(qAnd,'+'),qAnd_plus},
            {std::make_pair(qAnd_plus,'='),qAnd_plus_equals},
            {std::make_pair(qAnd,'?'),qAnd_question},
            {std::make_pair(qAnd,'='),qAnd_question_equals},
            {std::make_pair(q0,'-'),qMinus},
            {std::make_pair(qMinus,'>'),qMinus_GT},
            {std::make_pair(qMinus,'='),qMinus_equals},
            {std::make_pair(q0,'+'),qPlus},
            {std::make_pair(qPlus,'='),qPlus_equals},
            {std::make_pair(q0,'*'),qMult},
            {std::make_pair(qMult,'='),qMult_equals},
            {std::make_pair(q0,'%'),qPercent},
            {std::make_pair(qPercent,'='),qPercent_equals},
            {std::make_pair(q0,'/'),qDiv},
            {std::make_pair(qDiv,'='),qDiv_equals},
            {std::make_pair(q0,'|'),qPipe},
            {std::make_pair(qPipe,'+'),qPipe_Plus},
            {std::make_pair(qPipe_Plus,'='),qPipe_Plus_equals},
            {std::make_pair(qPipe,'-'),qPipe_Minus},
            {std::make_pair(qPipe_Minus,'='),qPipe_Minus_equals},
            {std::make_pair(qPipe,'*'),qPipe_Mult},
            {std::make_pair(qPipe_Mult,'='),qPipe_Mult_equals},
            {std::make_pair(qPipe,'/'),qPipe_Div},
            {std::make_pair(qPipe_Div,'='),qPipe_Div_equals},
            {std::make_pair(qPipe,'|'),qPipe_Pipe},
            {std::make_pair(qPipe,'^'),qPipe_Up},
            {std::make_pair(qPipe,'<'),qPipe_LT},
            {std::make_pair(qPipe,'>'),qPipe_GT},
            {std::make_pair(q0,'@'),qAt},
            {std::make_pair(qAt,'@'),qAt_At},
            {std::make_pair(q0,':'),qColon},
            {std::make_pair(q0,':'),qColon},
            {std::make_pair(qColon,'='),qColon_equals},
            {std::make_pair(q0,'.'),qDot},
            {std::make_pair(q0,'{'),qLCB},
            {std::make_pair(q0,'}'),qRCB},
            {std::make_pair(q0,'<'),qLT},
            {std::make_pair(qLT,'='),qLT_equals},
            {std::make_pair(qLT,'-'),qLT_Minus},
            {std::make_pair(q0,'='),qEquals},
            {std::make_pair(q0,'>'),qGT},
            {std::make_pair(qGT,'<'),qGT_LT},
            {std::make_pair(qGT,'='),qGT_equals},
            {std::make_pair(q0,'b'),q1ID},
            {std::make_pair(q0,'h'),q1ID},
            {std::make_pair(q0,'j'),q1ID},
            {std::make_pair(q0,'k'),q1ID},
            {std::make_pair(q0,'w'),q1ID},
            {std::make_pair(q0,'y'),q1ID},
            {std::make_pair(q0,'z'),q1ID},
            {std::make_pair(q0,'\"'),qBeginStr},
            {std::make_pair(q0,'\''),qBeginChr},
            {std::make_pair(qChar,'\''),qFinalizeChr},
            {std::make_pair(qBeginStr,'\"'),qFinalizeStr},
            {std::make_pair(q1Str,'\"'),qFinalizeStr},
            {std::make_pair(q2Str,'\"'),qFinalizeStr},
            {std::make_pair(q3Str,'\"'),qFinalizeStr},
            {std::make_pair(q4Str,'\"'),qFinalizeStr},
            {std::make_pair(q5Str,'\"'),qFinalizeStr},
            {std::make_pair(q6Str,'\"'),qFinalizeStr},
            {std::make_pair(q7Str,'\"'),qFinalizeStr},
            {std::make_pair(q8Str,'\"'),qFinalizeStr},
            {std::make_pair(q9Str,'\"'),qFinalizeStr},
            {std::make_pair(q10Str,'\"'),qFinalizeStr},
            {std::make_pair(q11Str,'\"'),qFinalizeStr},
            {std::make_pair(q12Str,'\"'),qFinalizeStr},
            {std::make_pair(q13Str,'\"'),qFinalizeStr},
            {std::make_pair(q14Str,'\"'),qFinalizeStr},
            {std::make_pair(q15Str,'\"'),qFinalizeStr},
            {std::make_pair(q16Str,'\"'),qFinalizeStr},
            {std::make_pair(q17Str,'\"'),qFinalizeStr},
            {std::make_pair(q18Str,'\"'),qFinalizeStr},
            {std::make_pair(q19Str,'\"'),qFinalizeStr},
            {std::make_pair(q20Str,'\"'),qFinalizeStr},
            {std::make_pair(q21Str,'\"'),qFinalizeStr},
            {std::make_pair(q22Str,'\"'),qFinalizeStr},
            {std::make_pair(q23Str,'\"'),qFinalizeStr},
            {std::make_pair(q24Str,'\"'),qFinalizeStr},
            {std::make_pair(q25Str,'\"'),qFinalizeStr},
            {std::make_pair(q26Str,'\"'),qFinalizeStr},
            {std::make_pair(q27Str,'\"'),qFinalizeStr},
            {std::make_pair(q28Str,'\"'),qFinalizeStr},
            {std::make_pair(q29Str,'\"'),qFinalizeStr},
            {std::make_pair(q30Str,'\"'),qFinalizeStr},
            {std::make_pair(q31Str,'\"'),qFinalizeStr},
            {std::make_pair(q0,'#'),qHash},
            {std::make_pair(qHash,'#'),qHash_Hash},
            {std::make_pair(qHash,'>'),qHash_GT},
            {std::make_pair(qLT,'#'),qLT_Hash},
            {std::make_pair(q0,'<'),qLT},
            {std::make_pair(qdi,'e'),qdie},
            {std::make_pair(qdie,'m'),qdiem},
            {std::make_pair(qs,'a'),qsa},
            {std::make_pair(qsa,'l'),qsal},
            {std::make_pair(qsal,'i'),qsali},
            {std::make_pair(qsali,'r'),qsalir},
            {std::make_pair(qsalir,'e'),qsalire},
            {std::make_pair(qno,'v'),qnov},
            {std::make_pair(qnov,'i'),qnovi},
            {std::make_pair(qnovi,'s'),qnovis},





    };   //Tabla de estados (para saber que estado sigue)
    std::map<State, Token> tokens={
            //{q0, Token(t_error,0)},
            {s_error_not_in_automata, Token(t_error)},
            {qaeger, Token(t_aeger)},
            {qauctum, Token(t_auctum)},
            {qaut, Token(t_op_binaria_logico,1)},
            {qaut_equals, Token(t_asignador,15)},
            {qautem, Token(t_autem)},
            {qcasus, Token(t_casus)},
            {qcatena, Token(t_atomico,1)},
            {qcertus, Token(t_then_else,1)},
            {qclaudeo, Token(t_claudeo)},
            {qcommutabilis, Token(t_commutabilis)},
            {qconiguo, Token(t_coniugo)},
            {qcorpus, Token(t_corpus)},
            {qdecrementum, Token(t_op_unaria,1)},
            {qdetrimentum, Token(t_detrimentum)},
            {qdirectus, Token(t_directus)},
            {qdito, Token(t_dito)},
            {qdixi, Token(t_dixi)},
            {qdualis, Token(t_corpus)},
            {qefficio, Token(t_efficio)},
            {qexemplar, Token(t_exemplar)},
            {qescribo, Token(t_modo_lectura,2)},
            {qest, Token(t_est)},
            {qet, Token(t_op_binaria_logico,2)},
            {qet_equals, Token(t_asignador,13)},
            {qfalsidicus, Token(t_lit_bool,1)},
            {qfirmamentum, Token(t_firmamentum)},
            {qfinis, Token(t_finis)},
            {qfractio, Token(t_atomico,3)},
            {qfuribundus, Token(t_furibundus)},
            {qitero, Token(t_itero)},
            {qin, Token(t_in)},
            {qincrementum, Token(t_op_unaria,2)},
            {qinitum, Token(t_initum)},
            {qimpono, Token(t_impono)},
            {qimago, Token(t_atomico,4)},
            {qign, Token(t_ign)},
            {qlectio, Token(t_op_arch_unario,1)},
            {qliber, Token(t_atomico,5)},
            {qligo, Token(t_op_arch_bin,1)},
            {qgradus, Token(t_gradus)},
            {qmentiri, Token(t_then_else,2)},
            {qopus, Token(t_opus)},
            {qordo, Token(t_ordo)},
            {qneco, Token(t_neco)},
            {qnomen, Token(t_nomen)},
            {qnon, Token(t_non)},
            {qnumerus, Token(t_atomico,6)},
            {qpanis, Token(t_panis)},
            {qpatentibus, Token(t_patentibus)},
            {qperpetus, Token(t_perpetus)},
            {qpergo, Token(t_pergo)},
            {qprope, Token(t_op_arch_unario,2)},
            {qquantus, Token(t_quantus)},
            {qreditus, Token(t_reditus)},
            {qrescribo, Token(t_modo_lectura,3)},
            {qscripturam, Token(t_op_arch_bin,2)},
            {qsigla, Token(t_sigla)},
            {qsum, Token(t_sum)},
            {qtempus, Token(t_tempus)},
            {qusque, Token(t_usque)},
            {qveridicus, Token(t_lit_bool,2)},
            {qxaut, Token(t_op_binaria_logico,3)},
            {qxaut_equals, Token(t_asignador,14)},
            {qLSB, Token(t_PI_dim)},
            {qLSB_LT_LT_RSB, Token(t_op_char,1)},
            {qLSB_GT_GT_RSB, Token(t_op_char,2)},
            {qLSB_and_question_RSB, Token(t_op_char_bool,1)},
            {qLSB_hash_question_RSB, Token(t_op_char_bool,2)},
            {qRSB, Token(t_PD_dim)},
            {qComma, Token(t_mas_elem)},
            {qAnd, Token(t_op_str_ter_1,1)},
            {qAnd_hash, Token(t_op_str_un,1)},
            {qAnd_plus, Token(t_op_str_bin,1)},
            {qAnd_question, Token(t_op_str_bin,2)},
            {qAnd_plus_equals, Token(t_asignador_str,1)},
            {qAnd_question_equals, Token(t_asignador_str,2)},
            {qMinus, Token(t_op_binaria_l2,1)},
            {qMinus_GT, Token(t_PD_reg)},
            {qMinus_equals, Token(t_asignador,3)},
            {qPlus, Token(t_op_binaria_l2,2)},
            {qPlus_equals, Token(t_asignador,2)},
            {qMult, Token(t_op_binaria_l1,2)},
            {qMult_equals, Token(t_asignador,4)},
            {qPercent, Token(t_op_binaria_l1,3)},
            {qPercent_equals, Token(t_asignador,6)},
            {qDiv, Token(t_op_binaria_l1,1)},
            {qDiv_equals, Token(t_asignador,5)},
            {qPipe, Token(t_pipe)},
            {qPipe_Plus, Token(t_op_binaria_l2f,2)},
            {qPipe_Plus_equals, Token(t_asignador,7)},
            {qPipe_Minus, Token(t_op_binaria_l2f,1)},
            {qPipe_Minus_equals, Token(t_asignador,8)},
            {qPipe_Mult, Token(t_op_binaria_l1f,2)},
            {qPipe_Mult_equals, Token(t_asignador,12)},
            {qPipe_Div, Token(t_op_binaria_l1f,1)},
            {qPipe_Div_equals, Token(t_asignador,11)},
            {qPipe_Pipe, Token(t_op_unariaf,1)},
            {qPipe_Up, Token(t_op_unariaf,2)},
            {qPipe_LT, Token(t_op_str_ter_2,1)},
            {qPipe_GT, Token(t_op_str_ter_2,2)},
            {qAt, Token(t_str_acc)},
            {qAt_At, Token(t_reg_acc)},
            {qColon_equals, Token(t_asignador,1)},
            {qColon, Token(t_dotdot)},
            {qDot, Token(t_end_ins)},
            {qLCB, Token(t_PI_arr)},
            {qRCB, Token(t_PD_arr)},
            {qLT, Token(t_op_comp,2)},
            {qLT_equals, Token(t_op_comp,5)},
            {qLT_Minus, Token(t_PI_reg)},
            {qEquals, Token(t_op_comp,3)},
            {qGT, Token(t_op_comp,1)},
            {qGT_LT, Token(t_op_comp,6)},
            {qGT_equals, Token(t_op_comp,4)},
            {qFinalizeStr,Token(t_literalString)},
            {qFinalizeChr,Token(t_literalCaracter)},
            {q3,Token(t_literalCaracter)},
            {qdiem,Token(t_atomico,7)},
            {qsalire,Token(t_salire)},
            {qnovis,Token(t_novis)}


            //{q7, Token(t_op_comp,2)},
            //{q8, Token(t_op_comp,2)}

    };                      //Lista de tokens asociados a un estado

    scanner(char*filename):filename(filename){
        //ingresar ids en tokens
        for (int i = 0; i <31; ++i) {
            this->tokens.insert({static_cast<State>(static_cast<int>(q1ID) + i),Token(t_ID)});
            if (i<30){
                for (int j = 'a'; j <'z'+1; ++j)
                    this->nextState.insert({{static_cast<State>(static_cast<int>(q1ID) + i),j},static_cast<State>(static_cast<int>(q1ID) + i+1)});
                for (int j = '0'; j <'9'+1; ++j)
                    this->nextState.insert({{static_cast<State>(static_cast<int>(q1ID) + i),j},static_cast<State>(static_cast<int>(q1ID) + i+1)});
            }
        }
        for (int i = 0; i <5; ++i) {
            this->tokens.insert({static_cast<State>(static_cast<int>(q3) + i),Token(t_literalEntero)});
            this->tokens.insert({static_cast<State>(static_cast<int>(qm3) + i),Token(t_literalEntero)});

            if(i<4)
                for (int j = '0'; j <'9'+1; ++j){
                    if(i==0){
                        this->nextState.insert({{static_cast<State>(static_cast<int>(qMinus)),j}, static_cast<State>(static_cast<int>(qm3) )});
                        this->nextState.insert({{static_cast<State>(static_cast<int>(q0)),j}, static_cast<State>(static_cast<int>(q3) )});

                    }
                    this->nextState.insert({{static_cast<State>(static_cast<int>(q3)+i ),j}, static_cast<State>(static_cast<int>(q3) + i+1)});
                    this->nextState.insert({{static_cast<State>(static_cast<int>(qm3)+i ),j}, static_cast<State>(static_cast<int>(qm3) + i+1)});
                }

        }


    }

    void run();
    Token getToken();

};

#endif //SCANNER_SCANNER_H
